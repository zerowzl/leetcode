package bits.powerOfTwo;

/* *****************************************************************************

231. 2 的幂
给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。 
如果存在一个整数 x 使得 n == 2x ，则认为 n 是 2 的幂次方。

示例 1：
输入：n = 1
输出：true
解释：20 = 1

示例 2：
输入：n = 16
输出：true
解释：24 = 16

示例 3：
输入：n = 3
输出：false
 
示例 4：
输入：n = 4
输出：true

示例 5：
输入：n = 5
输出：false
 
提示：
-231 <= n <= 231 - 1

进阶：你能够不使用循环/递归解决此问题吗？

*******************************************************************************/

/**
 * @author Dave Wang
 */
public class PowerOfTwo {

    public boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        int count = 0;
        // 手动统计出现了几个二进制的1
        while (n != 0) {
            if ((n & 1) % 2 == 1) {
                count++;
            }
            n = n >>> 1;
        }
        return count == 1;
    }

    public boolean isPowerOfTwo2(int n) {
        // n如果是2的次幂的话, 它的二进制表示就只有一个1
        // 假设 n = (10...0) 那么: n-1 = (01...1)
        // (10...0) & (01...1) = 0
        return n > 0 && (n & (n - 1)) == 0;
    }

    public boolean isPowerOfTwo3(int n) {
        // -n是负数, 负数在计算机中是用补码(原码取反加1)表示的
        // 假设 n = (10...0) 那么: -n = (01...1) + 1 --> (10...0)
        // (10...0) & (10...0), 高位为0, 低位保留也即是n
        return n > 0 && (n & (-n)) == n;
    }

}
